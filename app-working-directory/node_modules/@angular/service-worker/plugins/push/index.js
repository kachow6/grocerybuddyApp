var EMPTY_MANIFEST = {};
var NOTIFICATION_OPTION_NAMES = [
    'actions',
    'body',
    'dir',
    'icon',
    'lang',
    'renotify',
    'requireInteraction',
    'tag',
    'vibrate',
    'data'
];
export function Push() {
    return function (worker) { return new PushImpl(worker); };
}
var PushImpl = (function () {
    function PushImpl(worker) {
        this.worker = worker;
        this.streams = [];
        this.buffer = [];
    }
    Object.defineProperty(PushImpl.prototype, "pushManifest", {
        get: function () {
            return this.worker.manifest['push'] || EMPTY_MANIFEST;
        },
        enumerable: true,
        configurable: true
    });
    PushImpl.prototype.setup = function (ops) { };
    PushImpl.prototype.message = function (message, id) {
        var _this = this;
        switch (message['cmd']) {
            case 'push':
                this.streams.push(id);
                if (this.buffer !== null) {
                    this.buffer.forEach(function (message) { return _this.worker.sendToStream(id, message); });
                    this.buffer = null;
                }
                break;
        }
    };
    PushImpl.prototype.messageClosed = function (id) {
        var index = this.streams.indexOf(id);
        if (index === -1) {
            return;
        }
        this.streams.splice(index, 1);
        if (this.streams.length === 0) {
            this.buffer = [];
        }
    };
    PushImpl.prototype.push = function (data) {
        var _this = this;
        this.maybeShowNotification(data);
        if (this.buffer !== null) {
            this.buffer.push(data);
        }
        else {
            this.streams.forEach(function (id) {
                _this.worker.sendToStream(id, data);
            });
        }
    };
    PushImpl.prototype.maybeShowNotification = function (data) {
        if (!data.notification || !data.notification.title) {
            return;
        }
        var manifest = this.pushManifest;
        if (!manifest.showNotifications || (!!manifest.backgroundOnly && this.buffer === null)) {
            return;
        }
        var desc = data.notification;
        var options = {};
        NOTIFICATION_OPTION_NAMES
            .filter(function (name) { return desc.hasOwnProperty(name); })
            .forEach(function (name) { return options[name] = desc[name]; });
        this.worker.showNotification(desc['title'], options);
    };
    return PushImpl;
}());
export { PushImpl };
//# sourceMappingURL=index.js.map